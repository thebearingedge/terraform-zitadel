services:

  app:
    image: gcr.io/google-samples/hello-app:1.0

  haproxy:
    image: docker.io/haproxytech/haproxy-alpine:2.9.7
    volumes:
      - ./services/haproxy/etc/haproxy:/etc/haproxy
      - ./certs/tls.pem:/etc/ssl/certs/tls.pem
    ports:
      - 127.0.0.1:80:80
      - 127.0.0.1:443:443
    networks:
      default:
        aliases:
          - ${DOMAIN_NAME}
          - pg.${DOMAIN_NAME}
          - db.${DOMAIN_NAME}
          - smtp.${DOMAIN_NAME}
          - mail.${DOMAIN_NAME}
          - s3.${DOMAIN_NAME}
          - minio.${DOMAIN_NAME}
    healthcheck:
      test: for port in 25 80 443 5432; do /usr/bin/nc -z 127.0.0.1 $$port; done
      interval: 3s
      start_period: 3s
      retries: 10

  postgres:
    image: docker.io/library/postgres:16.2-alpine3.19
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASES: ${POSTGRES_DATABASES}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./services/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./services/postgres/tmp:/tmp
    healthcheck:
      test: /tmp/healthcheck.sh
      interval: 5s
      start_period: 2s
      retries: 10

  pgweb:
    image: docker.io/sosedoff/pgweb:0.15.0
    environment:
      PGWEB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@pg.${DOMAIN_NAME}/postgres?sslmode=disable
    depends_on:
      haproxy:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: /usr/bin/curl -o /dev/null -fsS http://localhost:8081
      interval: 3s
      start_period: 3s
      retries: 10

  mailpit:
    image: docker.io/axllent/mailpit:v1.17.0
    environment:
      MP_SMTP_AUTH: ${ADMIN_USERNAME}:${ADMIN_PASSWORD}
    volumes:
      - ./certs:/etc/mailpit/certs
    command:
      - --smtp-tls-cert
      - /etc/mailpit/certs/tls.crt
      - --smtp-tls-key
      - /etc/mailpit/certs/tls.key
    depends_on:
      haproxy:
        condition: service_healthy
    healthcheck:
      test: /usr/bin/wget --spider -q http://localhost:8025
      interval: 3s
      start_period: 3s
      retries: 10

  minio:
    image: quay.io/minio/minio:RELEASE.2024-04-18T19-09-19Z
    environment:
      MINIO_ENDPOINT: http://localhost:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: https://minio.${DOMAIN_NAME}
    volumes:
      - ./services/minio/tmp:/tmp
      - ${ROOT_CA_PEM}:/etc/ssl/certs/root-ca.pem
      - minio_data:/data
    command:
      - server
      - /data
      - --console-address
      - :9001
    depends_on:
      haproxy:
        condition: service_healthy
    healthcheck:
      test: /tmp/scripts/healthcheck.sh
      interval: 3s
      start_period: 3s
      retries: 10

  minio_init:
    image: quay.io/minio/minio:RELEASE.2024-04-18T19-09-19Z
    entrypoint: [/tmp/scripts/init.sh]
    environment:
      MINIO_APPS: ${MINIO_APPS}
      MINIO_ENDPOINT: https://s3.${DOMAIN_NAME}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ${ROOT_CA_PEM}:/etc/ssl/certs/root-ca.pem
      - ./services/minio/tmp:/tmp
    depends_on:
      haproxy:
        condition: service_started
      minio:
        condition: service_healthy

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: compose0

volumes:
  pg_data:
  minio_data: