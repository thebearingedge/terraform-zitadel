global
  maxconn 60000
  log stdout format raw daemon info

defaults main
  mode http
  log global
  timeout connect 10s
  timeout client  30s
  timeout server  30s

resolvers docker
  parse-resolv-conf
  timeout resolve       5s
  timeout retry         5s
  hold valid            30s
  hold other            30s
  hold refused          30s
  hold nx               30s
  hold timeout          30s
  hold obsolete         30s

frontend web
  mode http
  log-format %T\ %r
  bind *:80
  bind *:443 ssl crt /etc/ssl/certs/tls.pem alpn http/1.1 ssl-min-ver TLSv1.2
  http-request redirect scheme https unless { ssl_fc }
  http-request set-header X-Forwarded-Proto https
  http-request set-header X-Forwarded-For %[src]
  use_backend %[hdr(Host),lower,map_reg(/etc/haproxy/backends.map)]

backend app
  http-request do-resolve(txn.dst,docker,ipv4) str(app),map(/etc/haproxy/services.map)
  http-request set-dst-port str(app),map(/etc/haproxy/ports.map)
  http-request set-dst var(txn.dst)
  server clear 0.0.0.0:0

backend services
  http-request set-var(txn.subdomain) hdr(host),lower,field(1,'.')
  http-request do-resolve(txn.dst,docker,ipv4) var(txn.subdomain),map(/etc/haproxy/services.map)
  http-request set-dst-port var(txn.subdomain),map(/etc/haproxy/ports.map)
  http-request set-dst var(txn.dst)
  server clear 0.0.0.0:0

frontend postgres
  mode tcp
  bind *:5432
  use_backend postgres

backend postgres
  mode tcp
  tcp-request inspect-delay 5s
  tcp-request content do-resolve(txn.dst,docker,ipv4) str(pg),map(/etc/haproxy/services.map)
  tcp-request content set-dst-port str(pg),map(/etc/haproxy/ports.map)
  tcp-request content set-dst var(txn.dst)
  server clear 0.0.0.0:0
